---
bibliography: bio.bib
csl: harvard-cite-them-right.csl
title: Future Spatial Data Scientist's Group Project
execute:
  echo: false
  freeze: true
format:
  html:
    theme:
      - minty
      - css/web.scss
    code-copy: true
    code-link: true
    toc: true
    toc-title: On this page
    toc-depth: 2
    toc_float:
      collapsed: false
      smooth_scroll: true
  pdf:
    include-in-header:
      text: |
        \addtokomafont{disposition}{\rmfamily}
    header-includes:
      - '\usepackage{xcolor}'
      - '\definecolor{myblue}{RGB}{0,0,255}'
    papersize: a4
    geometry:
      - top=25mm
      - left=25mm
      - right=25mm
      - bottom=25mm
      - heightrounded
    toc: false
    number-sections: false
    colorlinks: true
    highlight-style: github
jupyter:
  jupytext:
    text_representation:
      extension: .qmd
      format_name: quarto
      format_version: '1.0'
      jupytext_version: 1.15.2
  kernelspec:
    display_name: Python 3 (ipykernel)
    language: python
    name: python3
---

# Declaration of Authorship {.unnumbered .unlisted}

We, Future Spatial Data Scientist, confirm that the work presented in this assessment is our own. Where information has been derived from other sources, we confirm that this has been indicated in the work. Where a Large Language Model such as ChatGPT has been used we confirm that we have made its contribution to the final submission clear.

Date: 2023/12/18

Student Numbers:   
23060146  
23083058  
23058858  
23125714  
23064414  

# Research propose

## Assessing the Impact of COVID-19 on London's Rental Markets: Opportunities and Risks Identified through Airbnb Marketplace Dynamics

How has the Covid-19 pandemic affected the short-term and long-term rental markets in London, as evidenced by the entries and exits within the Airbnb marketplace? This study aims to:

1. Investigate the spatial heterogeneity of Covid-19's impact on Airbnb listings, using distribution and change maps to visualize variations across different areas of London.
2. Analyze the data from February, April, June, August, October, and December 2020 to identify the nature and extent of any negative correlations, indicating a reduction in the number of listings corresponding with the progression of the pandemic.
3. Examine the differential impacts of Covid-19 on short-term versus long-term rentals, and assess the extent to which properties have transitioned from Airbnb's short-term market to the long-term rental sector.

This inquiry will require the establishment and justification of reasonable assumptions regarding the movement of properties between rental markets, documented methodically within the research.

{{< pagebreak >}}

```{python}
# Download biobib
import requests
url = "https://raw.githubusercontent.com/yichengjiangucl/CASA0013-Group-Work/main/bio.bib"
down_res = requests.get(url)
with open("bio.bib",'wb') as file:
    file.write(down_res.content)
# Download harvard-cite-them-right.csl
url2 = "https://raw.githubusercontent.com/yichengjiangucl/CASA0013-Group-Work/main/harvard-cite-them-right.csl"
down_res = requests.get(url2)
with open("harvard-cite-them-right.csl",'wb') as file:
    file.write(down_res.content)
```

# Response to Questions

```{python}
# Package required
import pandas as pd
import matplotlib.pyplot as plt
import geopandas as gpd
from shapely.geometry import Point, Polygon
import seaborn as sns

# Set the file path
listings_2019_path = "https://raw.githubusercontent.com/yichengjiangucl/CASA0013-Group-Work/main/listings_2019.csv"
listings_2020_path = "https://raw.githubusercontent.com/yichengjiangucl/CASA0013-Group-Work/main/listings_2020.csv"
listings_2021_path = "https://raw.githubusercontent.com/yichengjiangucl/CASA0013-Group-Work/main/listings_2020.csv"

# Read data
listings_2019 = pd.read_csv(listings_2019_path)
listings_2020 = pd.read_csv(listings_2020_path)
listings_2021 = pd.read_csv(listings_2021_path)
```

## 1. Who collected the data?
The data was collected by Wentao Lei from Airbnb(http://insideairbnb.com/) and ONS website.

## 2. Why did they collect it?
The data was collected for a study titled 'Opportunities and Risks arising from Covid-19,' aimed at understanding how Covid-19 has affected London's rental market, particularly in relation to Airbnb listings and the long-term rental sector. The research involved analyzing Covid-19 case and death numbers to assess their impact on people's decisions regarding renting. Additionally, the study examined the entry to and exit from the Airbnb marketplace by comparing snapshots of London's rental data at different time points.

## 3. How was the data collected?  
The data collection likely involved obtaining Airbnb data from public listings or through Airbnb's API, and Covid-19 infection and death data from the Office for National Statistics' (ONS) website. Rigorous data cleaning was performed to ensure accuracy, including removing duplicates, handling missing values, and filtering irrelevant information. Python and various libraries like Pandas, Matplotlib, Seaborn, and GeoPandas were used for data manipulation, analysis, geospatial data handling, and visualization, as illustrated in the 'Covid-19.py' script.

## London Map

```{python}
# Read GeoJson File to Geopandas
url3 = "https://raw.githubusercontent.com/yichengjiangucl/CASA0013-Group-Work/main/neighbourhoods.json"
down_res = requests.get(url3)
with open("neighbourhoods.geojson",'wb') as file:
    
    file.write(down_res.content)
London = gpd.read_file('neighbourhoods.geojson')
London.plot("neighbourhood")
plt.show()
```

                                     (figure 1)

## 4. How does the method of collection impact the completeness and/or accuracy of its representation of the process it seeks to study, and what wider issues does this raise?

Using "last comment data" to estimate rental dates is an approximation that can introduce inaccuracies.  In long-term rentals, where leases extend over more extended periods, inaccuracies in rental dates could have a more significant impact, potentially affecting the study's completeness and accuracy. In contrast, in short-term rentals with shorter durations, the error may be relatively minor and have less impact.

In summary, conclusions based on approximate data may not apply universally, and errors might be more pronounced in specific areas or rental types. Recognizing the limitations of data collection methods is crucial for policymakers and market participants to make informed decisions.

## 5. What ethical considerations does the use of this data raise? 
* Privacy and Data Protection: The use of personal data raises significant privacy concerns. Ensuring that the data is anonymized and does not violate individuals' privacy is crucial. This is in line with the principles discussed in @cite7.

* Hosts (Merchants): They might face privacy breaches or unwanted exposure. Additionally, competitors or local authorities could use this data against them, as indicated by @cite3 in their study on the competitive dynamics in the hospitality industry.

* Tourists: If their travel patterns or stays are revealed, it could lead to privacy violations or security risks, which @cite4 explore in their work on the privacy concerns in urban analytics.

* Government/Authorities: The data might reveal regulatory non-compliances or tax evasion, leading to legal actions or policy changes, as discussed by @cite2 in the context of digital markets regulation.

* Accuracy and Misinterpretation: Incorrect data can lead to false conclusions and potentially harmful decisions. The significance of data accuracy is underscored by @cite1, in their critical examination of big data's impact on decision-making.

* Legal and Ethical Compliance: The data must be used in compliance with laws. Ethical use also involves considering the potential negative effects of data release on various communities and individuals, as highlighted by @cite6.

* Economic Impact: Revealing certain data about Airbnb's operations might negatively impact local real estate markets, rental prices, and the tourism industry, according to the research by @cite5.

## 6. With reference to the data (*i.e.* using numbers, figures, maps, and descriptive statistics), what does an analysis of Hosts and Listing types suggest about the nature of Airbnb lets in London? 

```{python}
# Point data
Airbnb2019 = [Point(xy) for xy in zip(
    listings_2019['longitude'], listings_2019['latitude'])]
Airbnb2020 = [Point(xy) for xy in zip(
    listings_2020['longitude'], listings_2020['latitude'])]
Airbnb2021 = [Point(xy) for xy in zip(
    listings_2021['longitude'], listings_2021['latitude'])]
```

```{python}
# Specify our data, coordinate reference system and geometry list we created
geo_df_2019 = gpd.GeoDataFrame(listings_2019,  
                               crs=London.crs,  
                               geometry=Airbnb2019)  

geo_df_2020 = gpd.GeoDataFrame(listings_2020,  
                               crs=London.crs, 
                               geometry=Airbnb2020)  

geo_df_2021 = gpd.GeoDataFrame(listings_2021,  
                               crs=London.crs,  
                               geometry=Airbnb2021)  
```

### 1 Add Airbnb location to London Map
Distribution of Airbnb listings in London in different years (2019, 2020, and 2021).

```{python}
fig, axes = plt.subplots(1, 3, figsize=(18, 6))

London.plot(ax=axes[0], color='whitesmoke', edgecolor='black')
geo_df_2019.plot(ax=axes[0], color='black', marker='o', markersize=3)
axes[0].set_title('Airbnb location of London in 2019', 
fontdict={'fontsize': '15', 'fontweight': '3'})
axes[0].set_xlabel('Longitude')
axes[0].set_ylabel('Latitude')

London.plot(ax=axes[1], color='whitesmoke', edgecolor='black')
geo_df_2020.plot(ax=axes[1], color='black', marker='o', markersize=3)
axes[1].set_title('Airbnb location of London in 2020', 
fontdict={'fontsize': '15', 'fontweight': '3'})
axes[1].set_xlabel('Longitude')
axes[1].set_ylabel('Latitude')

London.plot(ax=axes[2], color='whitesmoke', edgecolor='black')
geo_df_2021.plot(ax=axes[2], color='black', marker='o', markersize=3)
axes[2].set_title('Airbnb location of London in 2021', 
fontdict={'fontsize': '15', 'fontweight': '3'})
axes[2].set_xlabel('Longitude')
axes[2].set_ylabel('Latitude')

plt.tight_layout()

plt.show()
```

                                    (figure 2)

Concentration in Central London: The concentration of Airbnb listings in Central London is a consistent trend across multiple data visualizations, indicating a high density of short-term rentals in areas that are tourist hotspots, business hubs, and well-serviced by public transportation.   This concentration is indicative of Airbnb's role in catering to visitors who prioritize ease of access to London's main attractions.

### 2 Number of Airbnb location for each neighborhood

```{python}
Number2019 = listings_2019['neighbourhood_cleansed'].value_counts(
).reset_index()
Number2019.columns = ['Neighborhood', 'Number of Airbnb Listings']

Number2020 = listings_2020['neighbourhood_cleansed'].value_counts(
).reset_index()
Number2020.columns = ['Neighborhood', 'Number of Airbnb Listings']

Number2021 = listings_2021['neighbourhood_cleansed'].value_counts(
).reset_index()
Number2021.columns = ['Neighborhood', 'Number of Airbnb Listings']

# Merge GeoDataFrame with DataFrame 
Airbnb2019 = pd.merge(London, Number2019, how='left',
                      left_on='neighbourhood', right_on='Neighborhood')
Airbnb2020 = pd.merge(London, Number2020, how='left',
                      left_on='neighbourhood', right_on='Neighborhood')
Airbnb2021 = pd.merge(London, Number2021, how='left',
                      left_on='neighbourhood', right_on='Neighborhood')

# Create a figure with three subplots in a horizontal layout
fig, axs = plt.subplots(1, 3, figsize=(25, 8))

# 2019
Airbnb2019.plot(column='Number of Airbnb Listings', cmap='OrRd',
                linewidth=0.8, ax=axs[0], edgecolor='0.8', legend=True)
axs[0].set_title('Number of Airbnb in each borough of London in 2019',
                 fontdict={'fontsize': '15', 'fontweight': '3'})
axs[0].set_xlabel('Longitude')
axs[0].set_ylabel('Latitude')

# 2020
Airbnb2020.plot(column='Number of Airbnb Listings', cmap='OrRd',
                linewidth=0.8, ax=axs[1], edgecolor='0.8', legend=True)
axs[1].set_title('Number of Airbnb in each borough of London in 2020',
                 fontdict={'fontsize': '15', 'fontweight': '3'})
axs[1].set_xlabel('Longitude')
axs[1].set_ylabel('Latitude')

# 2021
Airbnb2021.plot(column='Number of Airbnb Listings', cmap='OrRd',
                linewidth=0.8, ax=axs[2], edgecolor='0.8', legend=True)
axs[2].set_title('Number of Airbnb in each borough of London in 2021',
                 fontdict={'fontsize': '15', 'fontweight': '3'})
axs[2].set_xlabel('Longitude')
axs[2].set_ylabel('Latitude')

plt.tight_layout()

plt.show()
```
                                    
                                    (figure 3)

* This graph shows the number of Airbnbs in London boroughs in 2019, 2020 and 2021. 

* Spatial distribution: The largest number of AirbnBs are concentrated in the central area and gradually decrease to the peripheral area.

* Time trend: Over the three years, the distribution trend of Airbnb has remained consistent, with the central area always being the densest place.

### 3 Minimum nights from 2019-2021
### Add Airbnb location--minimal nights to London Map

 According to Airbnb's website, it's a long-term lease if it's more than 30 days, and a short-term lease if it's less than 30 days.

```{python}
# Create a canvas with three horizontally arranged subplots
fig, axes = plt.subplots(1, 3, figsize=(18, 6))

# Plot the 2019 map
London.plot(ax=axes[0], color='whitesmoke', edgecolor='black')
geo_df_2019[geo_df_2019['minimum_nights'] < 30].plot(ax=axes[0], 
markersize=4, 
color='black', 
marker='o', 
label='Short-term Rental')
geo_df_2019[geo_df_2019['minimum_nights'] >= 30].plot(ax=axes[0], 
markersize=4, 
color='red', 
marker='o', 
label='Long-term Rental')
axes[0].set_title('Airbnb location of London in 2019', 
fontdict={'fontsize': '15', 'fontweight': '3'})
axes[0].set_xlabel('Longitude')
axes[0].set_ylabel('Latitude')

# Plot the 2020 map
London.plot(ax=axes[1], color='whitesmoke', edgecolor='black')
geo_df_2020[geo_df_2020['minimum_nights'] < 30].plot(ax=axes[1], 
markersize=4, 
color='black', 
marker='o', 
label='Short-term Rental')
geo_df_2020[geo_df_2020['minimum_nights'] >= 30].plot(ax=axes[1], 
markersize=4, 
color='red', 
marker='o', 
label='Long-term Rental')
axes[1].set_title('Airbnb location of London in 2020', 
fontdict={'fontsize': '15', 'fontweight': '3'})
axes[1].set_xlabel('Longitude')
axes[1].set_ylabel('Latitude')

# Plot the 2021 map
London.plot(ax=axes[2], color='whitesmoke', edgecolor='black')
geo_df_2021[geo_df_2021['minimum_nights'] < 30].plot(ax=axes[2], 
markersize=4, 
color='black', 
marker='o', 
label='Short-term Rental')
geo_df_2021[geo_df_2021['minimum_nights'] >= 30].plot(ax=axes[2], 
markersize=4, 
color='red', 
marker='o', 
label='Long-term Rental')
axes[2].set_title('Airbnb location of London in 2021', 
fontdict={'fontsize': '15', 'fontweight': '3'})
axes[2].set_xlabel('Longitude')
axes[2].set_ylabel('Latitude')

plt.tight_layout()

plt.show()
```
                                    (figure 4)

* Concentration of short-term rentals: Over three years, short-term rentals (black dots) were highly concentrated in central London.

* Rarity of long-term rentals: Long-term rentals (red dots) are relatively rare in London and are concentrated in central areas.

### 4 Number of Short-term and Long-term Rental Airbnb in each borough of London 2019-2021

```{python}
 MiniNumber2019 = geo_df_2019.groupby(['neighbourhood_cleansed', 
    pd.cut(geo_df_2019['minimum_nights'], 
    bins=[-float('inf'), 
    29, 
    float('inf')], 
    labels=['minimum_nights<30', 'minimum_nights>=30'])]).size().unstack(fill_value=0)            
                                        
MiniNumber2020 = geo_df_2020.groupby(['neighbourhood_cleansed', 
    pd.cut(geo_df_2020['minimum_nights'], 
    bins=[-float('inf'), 
    29, 
    float('inf')], 
    labels=['minimum_nights<30', 'minimum_nights>=30'])]).size().unstack(fill_value=0)
                                                        
MiniNumber2021 = geo_df_2021.groupby(['neighbourhood_cleansed', 
    pd.cut(geo_df_2021['minimum_nights'], 
    bins=[-float('inf'), 
    29, 
    float('inf')], 
    labels=['minimum_nights<30', 'minimum_nights>=30'])]).size().unstack(fill_value=0)
                                                                        
# Resetting index and renaming columns
MiniNumber2019.reset_index(inplace=True)
MiniNumber2019.columns = ['Neighbourhood',
                          'Short-term Rental', 'Long-term Rental']

MiniNumber2020.reset_index(inplace=True)
MiniNumber2020.columns = ['Neighbourhood',
                          'Short-term Rental', 'Long-term Rental']

MiniNumber2021.reset_index(inplace=True)
MiniNumber2021.columns = ['Neighbourhood',
                          'Short-term Rental', 'Long-term Rental']

# Merge GeoDataFrame with DataFrame
MiniAirbnb2019 = pd.merge(London, MiniNumber2019, how='left',
                          left_on='neighbourhood', right_on='Neighbourhood')
MiniAirbnb2020 = pd.merge(London, MiniNumber2020, how='left',
                          left_on='neighbourhood', right_on='Neighbourhood')
MiniAirbnb2021 = pd.merge(London, MiniNumber2021, how='left',
                          left_on='neighbourhood', right_on='Neighbourhood')
```

### 4.1 Number for short-term from 2019-2021

```{python}
# Create a figure with three subplots arranged horizontally
fig, axes = plt.subplots(1, 3, figsize=(26, 6))

# 2019 Short-term Rental
MiniAirbnb2019.plot(column='Short-term Rental', cmap='OrRd',
                    linewidth=0.8, ax=axes[0], edgecolor='0.8', legend=True)

axes[0].set_title('Number of Short-term Rental Airbnb in each borough of London in 2019',
                  fontdict={'fontsize': '14', 'fontweight': '3'})
axes[0].set_xlabel('Longitude')
axes[0].set_ylabel('Latitude')

# 2020 Short-term Rental
MiniAirbnb2020.plot(column='Short-term Rental', cmap='OrRd',
                    linewidth=0.8, ax=axes[1], edgecolor='0.8', legend=True)

axes[1].set_title('Number of Short-term Rental Airbnb in each borough of London in 2020',
                  fontdict={'fontsize': '14', 'fontweight': '3'})
axes[1].set_xlabel('Longitude')
axes[1].set_ylabel('Latitude')

# 2021 Short-term Rental
MiniAirbnb2021.plot(column='Short-term Rental', cmap='OrRd',
                    linewidth=0.8, ax=axes[2], edgecolor='0.8', legend=True)

axes[2].set_title('Number of Short-term Rental Airbnb in each borough of London in 2021',
                  fontdict={'fontsize': '14', 'fontweight': '3'})
axes[2].set_xlabel('Longitude')
axes[2].set_ylabel('Latitude')

plt.tight_layout()

plt.show()
```

                                    (figure 5)

This figure shows that between 2019 and 2021, the number of Airbnb short-term listings in the central areas (the areas with the deepest color blocks) decreased significantly.

* Impact of COVID-19: The impact of the COVID-19 pandemic on the short-term rental market is evident from the data, with a noticeable decrease in the number of Airbnb listings between 2019 and 2021.   The timing of this decline suggests that hosts may have either removed their properties from the platform in response to diminished tourist flows or transitioned their listings to accommodate longer-term stays due to the pandemic's travel restrictions.

### 4.2 Number for long-term from 2019-2021

```{python}
# Create a figure with three subplots arranged horizontally
fig, axes = plt.subplots(1, 3, figsize=(26, 6))

# 2019 Long-term Rental
MiniAirbnb2019.plot(column='Long-term Rental', cmap='OrRd',
                    linewidth=0.8, ax=axes[0], edgecolor='0.8', legend=True)

axes[0].set_title('Number of Long-term Rental Airbnb in each borough of London in 2019',
                  fontdict={'fontsize': '14', 'fontweight': '3'})
axes[0].set_xlabel('Longitude')
axes[0].set_ylabel('Latitude')

# 2020 Long-term Rental
MiniAirbnb2020.plot(column='Long-term Rental', cmap='OrRd',
                    linewidth=0.8, ax=axes[1], edgecolor='0.8', legend=True)

axes[1].set_title('Number of Long-term Rental Airbnb in each borough of London in 2020',
                  fontdict={'fontsize': '14', 'fontweight': '3'})
axes[1].set_xlabel('Longitude')
axes[1].set_ylabel('Latitude')

# 2021 Long-term Rental
MiniAirbnb2021.plot(column='Long-term Rental', cmap='OrRd',
                    linewidth=0.8, ax=axes[2], edgecolor='0.8', legend=True)

axes[2].set_title('Number of Long-term Rental Airbnb in each borough of London in 2021',
                  fontdict={'fontsize': '14', 'fontweight': '3'})
axes[2].set_xlabel('Longitude')
axes[2].set_ylabel('Latitude')

plt.tight_layout()

plt.show()
```

                                    (figure 6)

* Central area concentration: Long-term rental Airbnb is mainly concentrated in central London and has remained so throughout the three years.

* Diminishing numbers: From 2019 to 2021, the number of long-term Airbnb rentals in central London has decreased. The maximum number in 2019 was more than 20, while by 2021 it was reduced to less than 15.

* Consistency of distribution: Although the number varied, the distribution pattern of long-term rental Airbnb remained consistent over the three years, concentrating in the central area and gradually decreasing to the periphery.

### 5 Calculate the average price for each neighborhood from 2019-2021

```{python}
average_prices2019 = listings_2019.groupby('neighbourhood_cleansed')[
    'price'].mean().reset_index()

average_prices2020 = listings_2020.groupby('neighbourhood_cleansed')[
    'price'].mean().reset_index()

average_prices2021 = listings_2021.groupby('neighbourhood_cleansed')[
    'price'].mean().reset_index()

# Merge GeoDataFrame with DataFrame based on the 'neighborhood' and 'neighbor' columns
Neighborhood_price2019 = pd.merge(
    London, average_prices2019, how='left', 
    left_on='neighbourhood', 
    right_on='neighbourhood_cleansed')
Neighborhood_price2020 = pd.merge(
    London, average_prices2020, how='left', 
    left_on='neighbourhood', 
    right_on='neighbourhood_cleansed')
Neighborhood_price2021 = pd.merge(
    London, average_prices2021, how='left', 
    left_on='neighbourhood', 
    right_on='neighbourhood_cleansed')


# Create a single figure with three subplots in one row
fig, axes = plt.subplots(1, 3, figsize=(24, 8))

# 2019
Neighborhood_price2019.plot(
    column='price', cmap='OrRd', linewidth=0.8, ax=axes[0], edgecolor='0.8', legend=True)
axes[0].set_title('Average Price of Airbnb in each borough of London in 2019',
                  fontdict={'fontsize': '15', 'fontweight': '3'})
axes[0].set_xlabel('Longitude')
axes[0].set_ylabel('Latitude')

# 2020
Neighborhood_price2020.plot(
    column='price', cmap='OrRd', linewidth=0.8, ax=axes[1], edgecolor='0.8', legend=True)
axes[1].set_title('Average Price of Airbnb in each borough of London in 2020',
                  fontdict={'fontsize': '15', 'fontweight': '3'})
axes[1].set_xlabel('Longitude')
axes[1].set_ylabel('Latitude')

# 2021
Neighborhood_price2021.plot(
    column='price', cmap='OrRd', linewidth=0.8, ax=axes[2], edgecolor='0.8', legend=True)
axes[2].set_title('Average Price of Airbnb in each borough of London in 2021',
                  fontdict={'fontsize': '15', 'fontweight': '3'})
axes[2].set_xlabel('Longitude')
axes[2].set_ylabel('Latitude')

plt.tight_layout()

plt.show()
```
                                    
                                    (figure 7)

* Pricing Dynamics: Pricing dynamics in central boroughs show an initial high average price for Airbnb listings, with a downward trend observed over the same period.   This decrease in pricing may reflect a strategy by hosts to adapt to the lowered demand during the pandemic or to entice a broader market segment in the face of travel constraints.

### 6 Total death in 2020

```{python}
# Set the file path 

data_2020_feb_path = "https://raw.githubusercontent.com/yichengjiangucl/CASA0013-Group-Work/main/data_2020_feb.csv"
data_2020_apr_path = 'https://raw.githubusercontent.com/yichengjiangucl/CASA0013-Group-Work/main/data_2020_apr.csv'
data_2020_june_path = 'https://raw.githubusercontent.com/yichengjiangucl/CASA0013-Group-Work/main/data_2020_june.csv'
data_2020_aug_path = 'https://raw.githubusercontent.com/yichengjiangucl/CASA0013-Group-Work/main/data_2020_aug.csv'
data_2020_oct_path = 'https://raw.githubusercontent.com/yichengjiangucl/CASA0013-Group-Work/main/data_2020_oct.csv'
data_2020_dec_path = 'https://raw.githubusercontent.com/yichengjiangucl/CASA0013-Group-Work/main/data_2020_dec.csv'
```

```{python}
# Read data
data_2020_feb = pd.read_csv(data_2020_feb_path)
data_2020_apr = pd.read_csv(data_2020_apr_path)
data_2020_june = pd.read_csv(data_2020_june_path)
data_2020_aug = pd.read_csv(data_2020_aug_path)
data_2020_oct = pd.read_csv(data_2020_oct_path)
data_2020_dec = pd.read_csv(data_2020_dec_path)
```



```{python}
#  Read the Excel data
Death2020 = 'https://raw.githubusercontent.com/yichengjiangucl/CASA0013-Group-Work/main/Death2020.csv'
Death2020_df = pd.read_csv(Death2020)

Death2020_feb = Death2020_df[(Death2020_df['Week'] > 'Week 5') 
& (Death2020_df['Week'] <= 'Week 9')].groupby('Geography')['death2020'].sum()

Death2020_apr = Death2020_df[(Death2020_df['Week'] > 'Week 13') 
& (Death2020_df['Week'] <= 'Week 18')].groupby('Geography')['death2020'].sum()

Death2020_jun = Death2020_df[(Death2020_df['Week'] > 'Week 23') 
& (Death2020_df['Week'] <= 'Week 26')].groupby('Geography')['death2020'].sum()

Death2020_aug = Death2020_df[(Death2020_df['Week'] > 'Week 31') 
& (Death2020_df['Week'] <= 'Week 35')].groupby('Geography')['death2020'].sum()

Death2020_oct = Death2020_df[(Death2020_df['Week'] > 'Week 39') 
& (Death2020_df['Week'] <= 'Week 44')].groupby('Geography')['death2020'].sum()

Death2020_dec = Death2020_df[(Death2020_df['Week'] > 'Week 48') 
& (Death2020_df['Week'] <= 'Week 53')].groupby('Geography')['death2020'].sum()
```



```{python}
Infection_2020_4 = 'https://raw.githubusercontent.com/yichengjiangucl/CASA0013-Group-Work/main/Infection4.csv'

Infection_2020_6 = 'https://raw.githubusercontent.com/yichengjiangucl/CASA0013-Group-Work/main/Infection6.csv'

Infection_2020_8 = 'https://raw.githubusercontent.com/yichengjiangucl/CASA0013-Group-Work/main/Infection8.csv'

Infection_2020_10 = 'https://raw.githubusercontent.com/yichengjiangucl/CASA0013-Group-Work/main/Infection10.csv'

Infection_2020_12 = 'https://raw.githubusercontent.com/yichengjiangucl/CASA0013-Group-Work/main/Infection12.csv'


Infection_2020_apr = pd.read_csv(Infection_2020_4)

Infection_2020_jun = pd.read_csv(Infection_2020_6)

Infection_2020_aug = pd.read_csv(Infection_2020_8)

Infection_2020_oct = pd.read_csv(Infection_2020_10)

Infection_2020_dec = pd.read_csv(Infection_2020_12)
```


```{python}
Death2020_feb_merge = pd.merge(London, Death2020_feb, how='left', 
left_on='neighbourhood', right_on='Geography')

Death2020_apr_merge = pd.merge(London, Death2020_apr, how='left', 
left_on='neighbourhood', right_on='Geography')

Death2020_jun_merge = pd.merge(London, Death2020_jun, how='left', 
left_on='neighbourhood', right_on='Geography')

Death2020_aug_merge = pd.merge(London, Death2020_aug, how='left', 
left_on='neighbourhood', right_on='Geography')

Death2020_oct_merge = pd.merge(London, Death2020_oct, how='left', 
left_on='neighbourhood', right_on='Geography')

Death2020_dec_merge = pd.merge(London, Death2020_dec, how='left', 
left_on='neighbourhood', right_on='Geography')
```

### Visualize Covid-19 deaths in different boroughs or areas of London in different months of 2020.

```{python}
# Create a figure with two rows and three columns of subplots
fig, axes = plt.subplots(2, 3, figsize=(18, 12))

# 2020-2
Death2020_feb_merge.plot(column='death2020', cmap='OrRd',
                          linewidth=0.8, ax=axes[0, 0], 
                          edgecolor='0.8', legend=True)
axes[0, 0].set_title('Total death in Feb 2020', 
fontdict={'fontsize': '14', 'fontweight': '3'})
axes[0, 0].set_xlabel('Longitude')
axes[0, 0].set_ylabel('Latitude')

# 2020-4
Death2020_apr_merge.plot(column='death2020', cmap='OrRd',
                          linewidth=0.8, ax=axes[0, 1], 
                          edgecolor='0.8', legend=True)
axes[0, 1].set_title('Total death in Apr 2020', 
fontdict={'fontsize': '14', 'fontweight': '3'})
axes[0, 1].set_xlabel('Longitude')
axes[0, 1].set_ylabel('Latitude')

# 2020-6
Death2020_jun_merge.plot(column='death2020', cmap='OrRd',
                          linewidth=0.8, ax=axes[0, 2], 
                          edgecolor='0.8', legend=True)
axes[0, 2].set_title('Total death in Jun 2020', 
fontdict={'fontsize': '14', 'fontweight': '3'})
axes[0, 2].set_xlabel('Longitude')
axes[0, 2].set_ylabel('Latitude')

# 2020-8
Death2020_aug_merge.plot(column='death2020', cmap='OrRd',
                          linewidth=0.8, ax=axes[1, 0], 
                          edgecolor='0.8', legend=True)
axes[1, 0].set_title('Total death in Aug 2020', 
fontdict={'fontsize': '14', 'fontweight': '3'})
axes[1, 0].set_xlabel('Longitude')
axes[1, 0].set_ylabel('Latitude')

# 2020-10
Death2020_oct_merge.plot(column='death2020', cmap='OrRd',
                          linewidth=0.8, ax=axes[1, 1], 
                          edgecolor='0.8', legend=True)
axes[1, 1].set_title('Total death in Oct 2020', 
fontdict={'fontsize': '14', 'fontweight': '3'})
axes[1, 1].set_xlabel('Longitude')
axes[1, 1].set_ylabel('Latitude')

# 2020-12
Death2020_dec_merge.plot(column='death2020', cmap='OrRd',
                          linewidth=0.8, ax=axes[1, 2], 
                          edgecolor='0.8', legend=True)
axes[1, 2].set_title('Total death in Dec 2020', 
fontdict={'fontsize': '14', 'fontweight': '3'})
axes[1, 2].set_xlabel('Longitude')
axes[1, 2].set_ylabel('Latitude')

plt.tight_layout()

plt.show()
```
                                    
                                    (figure 8)

### 7 Short-term and Long-term Rental Airbnb location of London in 2020 monthly
* Short-term Rentals (minimum_nights < 30): Represented by black circles.
* Long-term Rentals (minimum_nights >= 30): Represented by red circles.

```{python}
Airbnb2020_feb = [Point(xy) for xy in zip(data_2020_feb['longitude'], 
data_2020_feb['latitude'])]
Airbnb2020_apr = [Point(xy) for xy in zip(data_2020_apr['longitude'], 
data_2020_apr['latitude'])]
Airbnb2020_jun = [Point(xy) for xy in zip(data_2020_june['longitude'], 
data_2020_june['latitude'])]
Airbnb2020_aug = [Point(xy) for xy in zip(data_2020_aug['longitude'], 
data_2020_aug['latitude'])]
Airbnb2020_oct = [Point(xy) for xy in zip(data_2020_oct['longitude'], 
data_2020_oct['latitude'])]
Airbnb2020_dec = [Point(xy) for xy in zip(data_2020_dec['longitude'], 
data_2020_dec['latitude'])]


geo_df_2020_feb = gpd.GeoDataFrame(data_2020_feb, 
                               #specify our data
                               crs=London.crs, 
                               #specify our coordinate reference system
                               geometry= Airbnb2020_feb) 
                               #specify the geometry list we created

geo_df_2020_apr = gpd.GeoDataFrame(data_2020_apr, 
                               #specify our data
                               crs=London.crs, 
                               #specify our coordinate reference system
                               geometry= Airbnb2020_apr) 
                               #specify the geometry list we created

geo_df_2020_jun = gpd.GeoDataFrame(data_2020_june, 
                               #specify our data
                               crs=London.crs, 
                               #specify our coordinate reference system
                               geometry= Airbnb2020_jun) 
                               #specify the geometry list we created

geo_df_2020_aug = gpd.GeoDataFrame(data_2020_aug, 
                               #specify our data
                               crs=London.crs, 
                               #specify our coordinate reference system
                               geometry= Airbnb2020_aug) 
                               #specify the geometry list we created

geo_df_2020_oct = gpd.GeoDataFrame(data_2020_oct, 
                               #specify our data
                               crs=London.crs, 
                               #specify our coordinate reference system
                               geometry= Airbnb2020_oct) 
                               #specify the geometry list we created

geo_df_2020_dec = gpd.GeoDataFrame(data_2020_dec, 
                               #specify our data
                               crs=London.crs, 
                               #specify our coordinate reference system
                               geometry= Airbnb2020_dec) 
                               #specify the geometry list we created

# Define your Airbnb data and GeoDataFrame creation here

# Create a 2x3 grid for subplots
fig, axes = plt.subplots(nrows=2, ncols=3, figsize=(18, 12))
fig.suptitle('Short-term and Long-term Rental Airbnb locations in London for different months in 2020', fontsize=20, fontweight='bold')

# Loop through each month and plot on a subplot
for i, (month_geo_df, month_name) in enumerate([(geo_df_2020_feb, 'February 2020'),
                                                 (geo_df_2020_apr, 'April 2020'),
                                                 (geo_df_2020_jun, 'June 2020'),
                                                 (geo_df_2020_aug, 'August 2020'),
                                                 (geo_df_2020_oct, 'October 2020'),
                                                 (geo_df_2020_dec, 'December 2020')]):
    row, col = divmod(i, 3)  # Determine the row and column for the subplot
    ax = axes[row, col]  # Select the current subplot
    
    London.plot(ax=ax, color='whitesmoke', edgecolor='black')  # Plot the London map
    
    month_geo_df[month_geo_df['minimum_nights'] < 30].plot(ax=ax, 
                                                          markersize=9, 
                                                          color='black', 
                                                          marker='o', 
                                                          label='Short-term Rental')
    month_geo_df[month_geo_df['minimum_nights'] >= 30].plot(ax=ax, 
                                                           markersize=9, 
                                                           color='red', 
                                                           marker='o', 
                                                           label='Long-term Rental')
    
    ax.set_title(f'{month_name}', fontsize=12, fontweight='bold')
    ax.set_xlabel('Longitude')
    ax.set_ylabel('Latitude')
    ax.legend(prop={'size': 10})

plt.tight_layout(rect=[0, 0, 1, 0.95])

plt.show()
```
                                    
                                (figure 9)

### 8 Number of Short-term and Long-term Rental ### Airbnb in each borough of London in 2020 monthly

```{python}
Merge2020_feb = geo_df_2020_feb.groupby(['neighbourhood_cleansed', 
pd.cut(geo_df_2020_feb['minimum_nights'], 
bins=[-float('inf'), 29, float('inf')], 
labels=['minimum_nights<30', 'minimum_nights>=30'])]).size().unstack(fill_value=0)

Merge2020_apr = geo_df_2020_apr.groupby(['neighbourhood_cleansed', 
pd.cut(geo_df_2020_apr['minimum_nights'], 
bins=[-float('inf'), 29, float('inf')], 
labels=['minimum_nights<30', 'minimum_nights>=30'])]).size().unstack(fill_value=0)

Merge2020_jun = geo_df_2020_jun.groupby(['neighbourhood_cleansed', 
pd.cut(geo_df_2020_jun['minimum_nights'], 
bins=[-float('inf'), 29, float('inf')], 
labels=['minimum_nights<30', 'minimum_nights>=30'])]).size().unstack(fill_value=0)

Merge2020_aug = geo_df_2020_aug.groupby(['neighbourhood_cleansed', 
pd.cut(geo_df_2020_aug['minimum_nights'], 
bins=[-float('inf'), 29, float('inf')], 
labels=['minimum_nights<30', 'minimum_nights>=30'])]).size().unstack(fill_value=0)

Merge2020_oct = geo_df_2020_oct.groupby(['neighbourhood_cleansed', 
pd.cut(geo_df_2020_oct['minimum_nights'], 
bins=[-float('inf'), 29, float('inf')], 
labels=['minimum_nights<30', 'minimum_nights>=30'])]).size().unstack(fill_value=0)

Merge2020_dec = geo_df_2020_dec.groupby(['neighbourhood_cleansed', 
pd.cut(geo_df_2020_dec['minimum_nights'], 
bins=[-float('inf'), 29, float('inf')], 
labels=['minimum_nights<30', 'minimum_nights>=30'])]).size().unstack(fill_value=0)

# Resetting index and renaming columns
Merge2020_feb.reset_index(inplace=True)
Merge2020_feb.columns = ['Neighbourhood', 
'Short-term Rental', 
'Long-term Rental']

Merge2020_apr.reset_index(inplace=True)
Merge2020_apr.columns = ['Neighbourhood', 
'Short-term Rental', 
'Long-term Rental']

Merge2020_jun.reset_index(inplace=True)
Merge2020_jun.columns = ['Neighbourhood', 
'Short-term Rental', 
'Long-term Rental']

Merge2020_aug.reset_index(inplace=True)
Merge2020_aug.columns = ['Neighbourhood', 
'Short-term Rental', 
'Long-term Rental']

Merge2020_oct.reset_index(inplace=True)
Merge2020_oct.columns = ['Neighbourhood', 
'Short-term Rental', 
'Long-term Rental']

Merge2020_dec.reset_index(inplace=True)
Merge2020_dec.columns = ['Neighbourhood', 
'Short-term Rental', 
'Long-term Rental']


# Merge GeoDataFrame with DataFrame based on the 'neighborhood' and 'neighbor' columns
MiniAirbnb2020_feb = pd.merge(London, Merge2020_feb, 
how='left', left_on='neighbourhood', right_on='Neighbourhood')
MiniAirbnb2020_apr = pd.merge(London, Merge2020_apr, 
how='left', left_on='neighbourhood', right_on='Neighbourhood')
MiniAirbnb2020_jun = pd.merge(London, Merge2020_jun, 
how='left', left_on='neighbourhood', right_on='Neighbourhood')
MiniAirbnb2020_aug = pd.merge(London, Merge2020_aug, 
how='left', left_on='neighbourhood', right_on='Neighbourhood')
MiniAirbnb2020_oct = pd.merge(London, Merge2020_oct, 
how='left', left_on='neighbourhood', right_on='Neighbourhood')
MiniAirbnb2020_dec = pd.merge(London, Merge2020_dec, 
how='left', left_on='neighbourhood', right_on='Neighbourhood')


MiniAirbnb2020_feb['Short-term Rental'] = MiniAirbnb2020_feb['Short-term Rental'].fillna(0)
MiniAirbnb2020_feb['Long-term Rental'] = MiniAirbnb2020_feb['Long-term Rental'].fillna(0)
MiniAirbnb2020_apr['Short-term Rental'] = MiniAirbnb2020_apr['Short-term Rental'].fillna(0)
MiniAirbnb2020_apr['Long-term Rental'] = MiniAirbnb2020_apr['Long-term Rental'].fillna(0)
MiniAirbnb2020_jun['Short-term Rental'] = MiniAirbnb2020_jun['Short-term Rental'].fillna(0)
MiniAirbnb2020_jun['Long-term Rental'] = MiniAirbnb2020_jun['Long-term Rental'].fillna(0)
MiniAirbnb2020_aug['Short-term Rental'] = MiniAirbnb2020_aug['Short-term Rental'].fillna(0)
MiniAirbnb2020_aug['Long-term Rental'] = MiniAirbnb2020_aug['Long-term Rental'].fillna(0)
MiniAirbnb2020_oct['Short-term Rental'] = MiniAirbnb2020_oct['Short-term Rental'].fillna(0)
MiniAirbnb2020_oct['Long-term Rental'] = MiniAirbnb2020_oct['Long-term Rental'].fillna(0)
MiniAirbnb2020_dec['Short-term Rental'] = MiniAirbnb2020_dec['Short-term Rental'].fillna(0)
MiniAirbnb2020_dec['Long-term Rental'] = MiniAirbnb2020_dec['Long-term Rental'].fillna(0)
```

### Visualize short-term rental data for different months

```{python}
# Create a 2x3 subplot layout
fig, axes = plt.subplots(2, 3, figsize=(18, 12))
plt.subplots_adjust(wspace=0.2, hspace=0.3)  # Adjust the space between subplots

# Plot for February 2020
MiniAirbnb2020_feb.plot(column='Short-term Rental', cmap='OrRd', linewidth=0.8, ax=axes[0, 0], edgecolor='0.8', legend=True)
axes[0, 0].set_title('Feb 2020 - Short-term Rental', fontsize=12)

# Plot for April 2020
MiniAirbnb2020_apr.plot(column='Short-term Rental', cmap='OrRd', linewidth=0.8, ax=axes[0, 1], edgecolor='0.8', legend=True)
axes[0, 1].set_title('Apr 2020 - Short-term Rental', fontsize=12)

# Plot for June 2020
MiniAirbnb2020_jun.plot(column='Short-term Rental', cmap='OrRd', linewidth=0.8, ax=axes[0, 2], edgecolor='0.8', legend=True)
axes[0, 2].set_title('Jun 2020 - Short-term Rental', fontsize=12)

# Plot for August 2020
MiniAirbnb2020_aug.plot(column='Short-term Rental', cmap='OrRd', linewidth=0.8, ax=axes[1, 0], edgecolor='0.8', legend=True)
axes[1, 0].set_title('Aug 2020 - Short-term Rental', fontsize=12)

# Plot for October 2020
MiniAirbnb2020_oct.plot(column='Short-term Rental', cmap='OrRd', linewidth=0.8, ax=axes[1, 1], edgecolor='0.8', legend=True)
axes[1, 1].set_title('Oct 2020 - Short-term Rental', fontsize=12)

# Plot for December 2020
MiniAirbnb2020_dec.plot(column='Short-term Rental', cmap='OrRd', linewidth=0.8, ax=axes[1, 2], edgecolor='0.8', legend=True)
axes[1, 2].set_title('Dec 2020 - Short-term Rental', fontsize=12)

# Set common xlabel and ylabel for all subplots
for ax in axes.flat:
    ax.set_xlabel('Longitude', fontsize=10)
    ax.set_ylabel('Latitude', fontsize=10)

# Display the plots
plt.show()
```
                                    
                                    (figure 10)


### Visualize long-term rental data for different months

```{python}
# Create a 2x3 subplot layout for long-term rentals
fig, axes = plt.subplots(2, 3, figsize=(18, 12))
plt.subplots_adjust(wspace=0.2, hspace=0.3)  # Adjust the space between subplots

# Plot for February 2020
MiniAirbnb2020_feb.plot(column='Long-term Rental', cmap='OrRd', linewidth=0.8, ax=axes[0, 0], edgecolor='0.8', legend=True)
axes[0, 0].set_title('Feb 2020 - Long-term Rental', fontsize=12)

# Plot for April 2020
MiniAirbnb2020_apr.plot(column='Long-term Rental', cmap='OrRd', linewidth=0.8, ax=axes[0, 1], edgecolor='0.8', legend=True)
axes[0, 1].set_title('Apr 2020 - Long-term Rental', fontsize=12)

# Plot for June 2020
MiniAirbnb2020_jun.plot(column='Long-term Rental', cmap='OrRd', linewidth=0.8, ax=axes[0, 2], edgecolor='0.8', legend=True)
axes[0, 2].set_title('Jun 2020 - Long-term Rental', fontsize=12)

# Plot for August 2020
MiniAirbnb2020_aug.plot(column='Long-term Rental', cmap='OrRd', linewidth=0.8, ax=axes[1, 0], edgecolor='0.8', legend=True)
axes[1, 0].set_title('Aug 2020 - Long-term Rental', fontsize=12)

# Plot for October 2020
MiniAirbnb2020_oct.plot(column='Long-term Rental', cmap='OrRd', linewidth=0.8, ax=axes[1, 1], edgecolor='0.8', legend=True)
axes[1, 1].set_title('Oct 2020 - Long-term Rental', fontsize=12)

# Plot for December 2020
MiniAirbnb2020_dec.plot(column='Long-term Rental', cmap='OrRd', linewidth=0.8, ax=axes[1, 2], edgecolor='0.8', legend=True)
axes[1, 2].set_title('Dec 2020 - Long-term Rental', fontsize=12)

# Set common xlabel and ylabel for all subplots
for ax in axes.flat:
    ax.set_xlabel('Longitude', fontsize=10)
    ax.set_ylabel('Latitude', fontsize=10)

# Display the plots
plt.show()
```
                                (figure 11)

In conclusion, an analysis of hosts and listing types through descriptive statistics, maps, and figures suggests that Airbnb lets in London are largely designed to serve short-term visitors looking for convenient access to the city's core areas.   However, there is also a market for long-term stays, which may have been influenced by the economic and travel disruptions caused by the pandemic.   Pricing adjustments over time reflect a competitive and adapting market in response to these external pressures.


## 7. Drawing on your previous answers, and supporting your response with evidence (e.g. figures, maps, and statistical analysis/models), how *could* this data set be used to inform the regulation of Short-Term Lets (STL) in London?
Well, in this part of illustration, we decide to imput Covid infection and death data in 2020, when London firstly experienced a tough time, into discussion.

### 9 Infection in 2020

```{python}
Infection2020_apr_merge = pd.merge(London, 
Infection_2020_apr, 
how='left', left_on='neighbourhood', right_on='area')

Infection2020_jun_merge = pd.merge(London, 
Infection_2020_jun, 
how='left', left_on='neighbourhood', right_on='area')

Infection2020_aug_merge = pd.merge(London, 
Infection_2020_aug, 
how='left', left_on='neighbourhood', right_on='area')

Infection2020_oct_merge = pd.merge(London, 
Infection_2020_oct, 
how='left', left_on='neighbourhood', right_on='area')

Infection2020_dec_merge = pd.merge(London, 
Infection_2020_dec, 
how='left', left_on='neighbourhood', right_on='area')

import matplotlib.pyplot as plt

# Create a 2x3 grid of subplots
fig, axes = plt.subplots(2, 3, figsize=(18, 12))

# Plot April 2020
Infection2020_apr_merge.plot(column='infection', 
cmap='OrRd', 
linewidth=0.8, 
ax=axes[0, 0], 
edgecolor='0.8', 
legend=True)
axes[0, 0].set_title('Infection in April 2020', 
fontdict={'fontsize': '15', 'fontweight': '3'})
axes[0, 0].set_xlabel('Longitude')
axes[0, 0].set_ylabel('Latitude')

# Plot June 2020
Infection2020_jun_merge.plot(column='infection', 
cmap='OrRd', 
linewidth=0.8, 
ax=axes[0, 1], 
edgecolor='0.8', 
legend=True)
axes[0, 1].set_title('Infection in June 2020', 
fontdict={'fontsize': '15', 'fontweight': '3'})
axes[0, 1].set_xlabel('Longitude')
axes[0, 1].set_ylabel('Latitude')

# Plot August 2020
Infection2020_aug_merge.plot(column='infection', 
cmap='OrRd', 
linewidth=0.8, 
ax=axes[0, 2], 
edgecolor='0.8', 
legend=True)
axes[0, 2].set_title('Infection in August 2020', 
fontdict={'fontsize': '15', 'fontweight': '3'})
axes[0, 2].set_xlabel('Longitude')
axes[0, 2].set_ylabel('Latitude')

# Plot October 2020
Infection2020_oct_merge.plot(column='infection', 
cmap='OrRd', 
linewidth=0.8, 
ax=axes[1, 0], 
edgecolor='0.8', 
legend=True)
axes[1, 0].set_title('Infection in October 2020', 
fontdict={'fontsize': '15', 'fontweight': '3'})
axes[1, 0].set_xlabel('Longitude')
axes[1, 0].set_ylabel('Latitude')

# Plot December 2020
Infection2020_dec_merge.plot(column='infection', 
cmap='OrRd', 
linewidth=0.8, 
ax=axes[1, 1], 
edgecolor='0.8', 
legend=True)
axes[1, 1].set_title('Infection in December 2020', 
fontdict={'fontsize': '15', 'fontweight': '3'})
axes[1, 1].set_xlabel('Longitude')
axes[1, 1].set_ylabel('Latitude')

# Remove the empty subplot
fig.delaxes(axes[1, 2])

plt.tight_layout()

plt.show()
```
                                    
                                    (figure 12)

* Focusing on the infection separation map in 2020, we can see outer London firstly experienced infection period, then, the virus widely spread around city of London. In April, the number of infections ranged from 200 to 800, with the central area experiencing the most severe outbreak. By June, there had been a decrease in infections, with most areas reporting between 100 to 600 cases. By August, there was a further reduction in infections, with the majority of regions having between 50 to 175 cases, and a particularly noticeable decline in the central region. However, in October, the number of infections rebounded, with several regions seeing cases rise to between 1,500 and 2,500. Come December, the number of infections surged sharply, with almost all regions suffering from an increase in cases, which were now in the order of magnitude of 2,000 to 8,000, indicating a significant upswing in infections.


* For the 2020 death map, in general, inner London always has less deaths compared to outer London.
In February 2020, London recorded a relatively low mortality rate, yet by April, a notable escalation in fatalities was observed, particularly in the central and northern parts of the city, casting a somber shadow over these areas. The apex of mortality rates occurred in June, with the central region being especially hard-hit. Come August, a substantial decline in the death toll brought a measure of relief, as the general atmosphere began to brighten. While October saw a resurgence in the number of deaths, the figures did not reach the heights observed in June. December witnessed another uptick in mortality across several areas, yet the numbers remained below the peak seen in the earlier summer months.

* We can see a great deal of the houses are situated in the central part of London (inner London). During the pandemic year (2019-2021), they have witnessed a decrease especially in inner London (See figure 2).

Two major types for houses rental, short-term rent (within 30 days) and long-term rent (more than 30 days), have shown different variation during the COVID years. We usually regard short-term rent are generated by tourism and business, while long-term rent are preferred by students and employees. For the figure 8 above, short-term rents in 2020 are affected by location and seasons rather than Covid infections and deaths, while for the long-term rents, location is the dominant factor.


### 10 Correlation Matrix

```{python}
MiniAirbnb2020_feb_death = pd.merge(MiniAirbnb2020_feb, Death2020_feb, how='left', left_on='neighbourhood', right_on='Geography')
MiniAirbnb2020_apr_death = pd.merge(MiniAirbnb2020_apr, Death2020_apr, how='left', left_on='neighbourhood', right_on='Geography')
MiniAirbnb2020_jun_death = pd.merge(MiniAirbnb2020_jun, Death2020_jun, how='left', left_on='neighbourhood', right_on='Geography')
MiniAirbnb2020_aug_death = pd.merge(MiniAirbnb2020_aug, Death2020_aug, how='left', left_on='neighbourhood', right_on='Geography')
MiniAirbnb2020_oct_death = pd.merge(MiniAirbnb2020_oct, Death2020_oct, how='left', left_on='neighbourhood', right_on='Geography')
MiniAirbnb2020_dec_death = pd.merge(MiniAirbnb2020_dec, Death2020_dec, how='left', left_on='neighbourhood', right_on='Geography')

##Feburary infection data missing
MiniAirbnb2020_apr_death_infection = pd.merge(MiniAirbnb2020_apr_death, Infection_2020_apr, how='left', left_on='neighbourhood', right_on='area')
MiniAirbnb2020_jun_death_infection = pd.merge(MiniAirbnb2020_jun_death, Infection_2020_jun, how='left', left_on='neighbourhood', right_on='area')
MiniAirbnb2020_aug_death_infection = pd.merge(MiniAirbnb2020_aug_death, Infection_2020_aug, how='left', left_on='neighbourhood', right_on='area')
MiniAirbnb2020_oct_death_infection = pd.merge(MiniAirbnb2020_oct_death, Infection_2020_oct, how='left', left_on='neighbourhood', right_on='area')
MiniAirbnb2020_dec_death_infection = pd.merge(MiniAirbnb2020_dec_death, Infection_2020_dec, how='left', left_on='neighbourhood', right_on='area')

import matplotlib.pyplot as plt
import seaborn as sns

# Create subplots with a 2x3 grid
fig, axes = plt.subplots(2, 3, figsize=(15, 10))

# Merge dataframes and compute correlation matrices for each month
dataframes = [
    MiniAirbnb2020_apr_death_infection,
    MiniAirbnb2020_jun_death_infection,
    MiniAirbnb2020_aug_death_infection,
    MiniAirbnb2020_oct_death_infection,
    MiniAirbnb2020_dec_death_infection
]
month_labels = ['April 2020', 'June 2020', 'August 2020', 'October 2020', 'December 2020']

# Iterate through dataframes and month labels to plot each subplot
for i, (df, month_label) in enumerate(zip(dataframes, month_labels)):
    if i < 5:  # Only create subplots for the first five dataframes
        row, col = divmod(i, 3)  # Calculate the row and column indices
        ax = axes[row, col]  # Select the appropriate subplot
        
        correlation_matrix = df[['Long-term Rental', 'Short-term Rental', 'death2020', 'infection']].corr()
        sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt='.2f', linewidths=0.5, ax=ax)
        
        ax.set_title(f'Correlation Matrix in {month_label}', fontdict={'fontsize': '15', 'fontweight': '3'})

plt.tight_layout()

plt.show()
```
                                    
                                    (figure 13)

* Rental Market and Mortality: Long-term and short-term rentals show a positive correlation throughout the study period, reaching the highest in October (0.52). This suggests that these rental markets may be influenced by similar market forces or correlated in their performance.

* Rental Market and Infections: The correlation between long-term and short-term rentals and COVID-19 deaths in 2020 varies over different months but is generally negative or close to zero, indicating no strong direct relationship between the rental market and mortality.

* Deaths and Infections: The correlation between long-term rentals and infections varies monthly, showing mixed positive and negative values. Short-term rentals exhibit a strong negative correlation with infections in June but little correlation in other months.

* Time Trend: Strong positive correlations between deaths and infections are seen in April and June (0.84 and 0.74), indicating an increase in infections is associated with an increase in deaths. The correlations between rentals and infections change over time, with a shift from negative or near-zero correlations in April and June to positive correlations by August, reflecting potential market responses to the pandemic.

* Correlation with COVID-19 Data: Correlation matrices suggest a relationship between short-term rentals and COVID-19 infection rates, particularly in the early months of the pandemic. However, these correlations weaken over time, possibly due to travel restrictions and increased public health awareness.

Overall, we can see COVID deaths are stronly linked to infection, moreover, we can see pendemic may cause a negative influence on Airbnb market. 
Focusing on the Correlation Matrix in April and June, it is the time when the COVID started, we can see negative values shown on the matrix, which daily news and announcements reporting COVID cause people’s panic and relutance to travel.
After several months, the situation seen to be alleviated, however, the deaths data still shows nagative effect on the rental market, especially on the short-term type, but for the long-term houses are tend to be complusory and indispensible for target customers.

Upon analyzing the spatial distribution of COVID-19 cases (figure 8) in conjunction with monthly rental data, we observe spatial heterogeneity, where regions with higher incidences of COVID-19 tend to experience a decrease in short-term rentals, reflecting the immediate and cautious response of consumers to health concerns.

### 11 Mutlivariable Joint distribution
Create a series of scatter plots and Kernel Density Estimates (KDE) to study the relationships and distributions between different variables.

```{python}
sns.set(font_scale=1.2)
sns.pairplot(MiniAirbnb2020_dec_death_infection[['Long-term Rental', 'Short-term Rental', 'death2020','infection']],kind='reg',diag_kind='kde')

sns.set(font_scale=1.2)
sns.pairplot(MiniAirbnb2020_oct_death_infection[['Long-term Rental', 'Short-term Rental', 'death2020','infection']],kind='reg',diag_kind='kde')

sns.set(font_scale=1.2)
sns.pairplot(MiniAirbnb2020_aug_death_infection[['Long-term Rental', 'Short-term Rental', 'death2020','infection']],kind='reg',diag_kind='kde')

sns.set(font_scale=1.2)
sns.pairplot(MiniAirbnb2020_jun_death_infection[['Long-term Rental', 'Short-term Rental', 'death2020','infection']],kind='reg',diag_kind='kde')

sns.set(font_scale=1.2)
sns.pairplot(MiniAirbnb2020_apr_death_infection[['Long-term Rental', 'Short-term Rental', 'death2020','infection']],kind='reg',diag_kind='kde')

plt.show()
```
                                    (figure 14)

* Long-term vs. Short-term Leases: The scatter plot indicates no clear linear relationship between long-term and short-term leases, suggesting their relative independence.

* Long-term Leases vs. Deaths and Infections: There is no apparent linear relationship between the number of long-term leases and COVID-19 deaths and infections, suggesting that long-term leases may not be a primary factor influencing these outcomes.

* Short-term Rentals vs. Deaths and Infections: The chart reveals no strong linear relationship between short-term rentals and COVID-19 deaths and infections, with data points showing limited correlation.

* Deaths vs. Infections: As expected, there is a positive correlation between the number of deaths and infections, as shown by the scatter plot and regression line.

In summary, COVID-19 has had a moderate impact on London's Airbnb market, with long-term rentals slightly more affected than short-term ones. Location, especially proximity to the city center, remains the most significant influence on rental trends. London's global significance has helped maintain market resilience, as seen in the data for inner London's short-term rentals, which initially declined but swiftly recovered. Overall, rental prices from 2019 to 2021 have decreased, which can benefit travelers.

This dataset can inform Short-Term Lets (STL) regulation in London, offering insights into the link between public health data and rental market dynamics. Regulators can use this information to tailor policies responsive to health crises while ensuring rental market stability and public health. For instance, in areas where higher COVID-19 rates coincide with short-term rental decreases, regulations can be adjusted to balance stability with health and safety. Additionally, observed pricing trends can inform decisions regarding housing affordability and accessibility during and after health emergencies.

## References

